import importlib.util
from scipy.integrate import solve_ivp


externals = @EXTERNALS@


def variable_type(type):
    if type == model.VariableType.VARIABLE_OF_INTEGRATION:
        return "variable of integration"
    elif type == model.VariableType.STATE:
        return "state"
    elif type == model.VariableType.CONSTANT:
        return "constant"
    elif type == model.VariableType.COMPUTED_CONSTANT:
        return "computed constant"
    else:
        return "algebraic"


def print_information(model):
    print("---------------------------------------[Information][BEGIN]")
    print(f"- Generator version: {model.__version__}")
    print(f"- libCellML version: {model.LIBCELLML_VERSION}")
    print("---------------------------------------")
    print("- Variable of integration:")
    print(f"   - {model.VOI_INFO['component']}.{model.VOI_INFO['name']} [{model.VOI_INFO['units']}]")
    print("---------------------------------------")
    print(f"- Number of states: {model.STATE_COUNT}")
    print("- States:")

    for i in range(0, model.STATE_COUNT):
        print(
            f"   - {model.STATE_INFO[i]['component']}.{model.STATE_INFO[i]['name']} [{model.STATE_INFO[i]['units']}]"
        )

    print("---------------------------------------")
    print(f"- Number of constants: {model.CONSTANT_COUNT}")
    print("- Constants:")

    for i in range(0, model.CONSTANT_COUNT):
        print(
            f"   - {model.CONSTANT_INFO[i]['component']}.{model.CONSTANT_INFO[i]['name']} [{model.CONSTANT_INFO[i]['units']}]"
        )

    print("---------------------------------------")
    print(f"- Number of computed constants: {model.COMPUTED_CONSTANT_COUNT}")
    print("- Computed constants:")

    for i in range(0, model.COMPUTED_CONSTANT_COUNT):
        print(
            f"   - {model.COMPUTED_CONSTANT_INFO[i]['component']}.{model.COMPUTED_CONSTANT_INFO[i]['name']} [{model.COMPUTED_CONSTANT_INFO[i]['units']}]"
        )

    print("---------------------------------------")
    print(f"- Number of algebraic variables: {model.ALGEBRAIC_COUNT}")
    print("- Algebraic variables:")

    for i in range(0, model.ALGEBRAIC_COUNT):
        print(
            f"   - {model.ALGEBRAIC_INFO[i]['component']}.{model.ALGEBRAIC_INFO[i]['name']} [{model.ALGEBRAIC_INFO[i]['units']}]"
        )

    if externals:
        print("---------------------------------------")
        print(f"- Number of external variables: {model.EXTERNAL_COUNT}")
        print("- External variables:")

        for i in range(0, model.EXTERNAL_COUNT):
            print(
                f"   - {model.EXTERNAL_INFO[i]['component']}.{model.EXTERNAL_INFO[i]['name']} [{model.EXTERNAL_INFO[i]['units']}]"
            )

    print("---------------------------------------[Information][END]")


def print_headers():
    print("voi", end="")

    for i in range(0, model.STATE_COUNT):
        print(f",{model.STATE_INFO[i]['name']}", end="")

    for i in range(0, model.CONSTANT_COUNT):
        print(f",{model.CONSTANT_INFO[i]['name']}", end="")

    for i in range(0, model.COMPUTED_CONSTANT_COUNT):
        print(f",{model.COMPUTED_CONSTANT_INFO[i]['name']}", end="")

    for i in range(0, model.ALGEBRAIC_COUNT):
        print(f",{model.ALGEBRAIC_INFO[i]['name']}", end="")

    if externals:
        for i in range(0, model.EXTERNAL_COUNT):
            print(f",{model.EXTERNAL_INFO[i]['name']}", end="")

    print("")


def print_values(voi, states, constants, computed_constants, algebraic):
    print(voi, end="")

    for i in range(0, model.STATE_COUNT):
        print(f",{states[i]}", end="")

    for i in range(0, model.CONSTANT_COUNT):
        print(f",{constants[i]}", end="")

    for i in range(0, model.COMPUTED_CONSTANT_COUNT):
        print(f",{computed_constants[i]}", end="")

    for i in range(0, model.ALGEBRAIC_COUNT):
        print(f",{algebraic[i]}", end="")

    if externals:
        for i in range(0, model.EXTERNAL_COUNT):
            print(f",{externals[i]}", end="")

    print("")


# Load our model.

spec = importlib.util.spec_from_file_location(
    "model", "${CMAKE_SOURCE_DIR}/src/@EXECUTABLE@/model.py"
)
model = importlib.util.module_from_spec(spec)

spec.loader.exec_module(model)

# Some information about the model.

print_information(model)

# Create our various arrays.

voi = 0.0
states = model.create_states_array()
rates = model.create_states_array()
constants = model.create_constants_array()
computed_constants = model.create_computed_constants_array()
algebraic = model.create_algebraic_array()

# Initialise our constants, computed constants, and algebraic variables and output their initial value/guess.

model.initialise_variables(states, rates, constants, computed_constants, algebraic)
model.compute_computed_constants(constants, computed_constants)
model.compute_rates(voi, states, rates, constants, computed_constants, algebraic)
model.compute_variables(voi, states, rates, constants, computed_constants, algebraic)

print("")
print("---------------------------------------[Values][BEGIN]")

print_headers()

if not @SKIP_FIRST_OUTPUT_POINT@:
    print_values(voi, states, constants, computed_constants, algebraic)

# Run our model.

output_points = @OUTPUT_POINTS@

if not @USE_OUTPUT_POINTS@:
    i = 0
    voi_max = @ENDING_POINT@
    voi_interval = @POINT_INTERVAL@

    while True:
        i += 1
        voi = i * voi_interval

        output_points.append(voi)

        if voi >= voi_max:
            break

voi = 0.0

for output_point in output_points:
    def func(t, y, rates, constants, computed_constants, algebraic):
        model.compute_rates(t, y, rates, constants, computed_constants, algebraic)

        return rates

    # Integrate our model.

    res = solve_ivp(func, (voi, output_point), states, args=(rates, constants, computed_constants, algebraic), method='LSODA', rtol=@RELATIVE_TOLERANCE@, atol=@ABSOLUTE_TOLERANCE@)
    states = res.y[:, -1]

    voi = output_point

    # Compute our variables.

    model.compute_variables(voi, states, rates, constants, computed_constants, algebraic)

    # Output the value of our states, constants, computed constants, and algebraic variables.

    print_values(voi, states, constants, computed_constants, algebraic)

print("---------------------------------------[Values][END]")
