import common
import importlib.util
import math


externals = @EXTERNALS@


def print_information(model):
    print("---------------------------------------[Information][BEGIN]")
    print(f"- Generator version: {model.__version__}")
    print(f"- libCellML version: {model.LIBCELLML_VERSION}")
    print("---------------------------------------")
    print(f"- Number of constants: {model.CONSTANT_COUNT}")
    print("- Constants:")

    for i in range(0, model.CONSTANT_COUNT):
        print(
            f"   - {model.CONSTANT_INFO[i]['component']}.{model.CONSTANT_INFO[i]['name']} [{model.CONSTANT_INFO[i]['units']}]"
        )

    print("---------------------------------------")
    print(f"- Number of computed constants: {model.COMPUTED_CONSTANT_COUNT}")
    print("- Computed constants:")

    for i in range(0, model.COMPUTED_CONSTANT_COUNT):
        print(
            f"   - {model.COMPUTED_CONSTANT_INFO[i]['component']}.{model.COMPUTED_CONSTANT_INFO[i]['name']} [{model.COMPUTED_CONSTANT_INFO[i]['units']}]"
        )

    print("---------------------------------------")
    print(f"- Number of algebraic variables: {model.ALGEBRAIC_COUNT}")
    print("- Algebraic variables:")

    for i in range(0, model.ALGEBRAIC_COUNT):
        print(
            f"   - {model.ALGEBRAIC_INFO[i]['component']}.{model.ALGEBRAIC_INFO[i]['name']} [{model.ALGEBRAIC_INFO[i]['units']}]"
        )

    if externals:
        print("---------------------------------------")
        print(f"- Number of external variables: {model.EXTERNAL_COUNT}")
        print("- External variables:")

        for i in range(0, model.EXTERNAL_COUNT):
            print(
                f"   - {model.EXTERNAL_INFO[i]['component']}.{model.EXTERNAL_INFO[i]['name']} [{model.EXTERNAL_INFO[i]['units']}]"
            )

    print("---------------------------------------[Information][END]")


def determine_w(w, values, count):
    for i in range(0, count):
        cw = common.iwidth(values[i])

        if cw > w:
            w = cw

    return w


def print_array(values, count, info, expected_values, w, ew):
    for i in range(0, count):
        print(f"- {info[i]['name']}: {int(w + math.isnan(values[i]) * 4 - common.iwidth(values[i])) * ' '}{values[i] :.3f} [{info[i]['units']}]", end='')

        try:
            expected_value = expected_values[info[i]['name']]

            if common.area_nearly_equal(values[i], expected_value):
                print(" |  OK")
            else:
                print(f" | NOK | {int(ew - common.iwidth(expected_value)) * ' '}{expected_value :.3f}")
        except:
            pass


def print_values(title, constants, computed_constants, algebraic, expected_values):
    w = 0

    w = determine_w(w, constants, model.CONSTANT_COUNT)
    w = determine_w(w, computed_constants, model.COMPUTED_CONSTANT_COUNT)
    w = determine_w(w, algebraic, model.ALGEBRAIC_COUNT)

    if externals:
        w = determine_w(w, externals, model.EXTERNAL_COUNT)

    ew = 0
    ev = list(expected_values.values())

    for i in range(0, len(ev)):
        ecw = common.iwidth(ev[i])

        if ecw > ew:
            ew = ecw

    print("")
    print(f"---------------------------------------[{title}][BEGIN]")

    print_array(constants, model.CONSTANT_COUNT, model.CONSTANT_INFO, expected_values, w, ew)
    print_array(computed_constants, model.COMPUTED_CONSTANT_COUNT, model.COMPUTED_CONSTANT_INFO, expected_values, w, ew)
    print_array(algebraic, model.ALGEBRAIC_COUNT, model.ALGEBRAIC_INFO, expected_values, w, ew)

    if externals:
        print_array(externals, model.EXTERNAL_COUNT, model.EXTERNAL_INFO, expected_values, w, ew)

    print(f"---------------------------------------[{title}][END]")

# Load our model.

spec = importlib.util.spec_from_file_location("model", "${CMAKE_SOURCE_DIR}/src/@EXECUTABLE@/model.py")
model = importlib.util.module_from_spec(spec)

spec.loader.exec_module(model)

# Some information about the model.

print_information(model)

# Create our various arrays.

constants = model.create_constants_array()
computed_constants = model.create_computed_constants_array()
algebraic = model.create_algebraic_array()

# Initialise our constants, computed constants, and algebraic variables and output their initial value/guess.

model.initialise_variables(constants, computed_constants, algebraic)
model.compute_computed_constants(constants, computed_constants)

print_values("Initial variable values/guesses", constants, computed_constants, algebraic, @INITIAL_VALUES_GUESSES@)

# Compute our variables.

model.compute_variables(constants, computed_constants, algebraic)

# Output the final value of our constants, computed constants, and algebraic variables.

print_values("Final variable values", constants, computed_constants, algebraic, @FINAL_VALUES@)
