import common
import importlib.util
import math


def variable_type(type):
    if type == model.VariableType.CONSTANT:
        return "constant"
    elif type == model.VariableType.COMPUTED_CONSTANT:
        return "computed constant"
    else:
        return "algebraic"


def print_information(model):
    print("---------------------------------------[Information][BEGIN]")
    print(f"- Generator version: {model.__version__}")
    print(f"- libCellML version: {model.LIBCELLML_VERSION}")
    print("---------------------------------------")
    print(f"- Number of variables: {model.VARIABLE_COUNT}")
    print("- Variables:")

    for i in range(0, model.VARIABLE_COUNT):
        print(
            f"   - {model.VARIABLE_INFO[i]['name']} [{model.VARIABLE_INFO[i]['units']}]:"
        )
        print(f"      - Type: {variable_type(model.VARIABLE_INFO[i]['type'])}")
        print(f"      - Component: {model.VARIABLE_INFO[i]['component']}")

    print("---------------------------------------[Information][END]")


def print_values(title, variables, expected_values):
    w = 0

    for i in range(0, model.VARIABLE_COUNT):
        cw = common.iwidth(variables[i])

        if cw > w:
            w = cw

    ew = 0
    ev = list(expected_values.values())

    for i in range(0, len(ev)):
        ecw = common.iwidth(ev[i])

        if ecw > ew:
            ew = ecw

    print("")
    print(f"---------------------------------------[{title}][BEGIN]")

    for i in range(0, model.VARIABLE_COUNT):
        print(f"- {model.VARIABLE_INFO[i]['name']}: {int(w + math.isnan(variables[i]) * 4 - common.iwidth(variables[i])) * ' '}{variables[i] :.3f} [{model.VARIABLE_INFO[i]['units']}]", end='');

        try:
            expected_value = expected_values[model.VARIABLE_INFO[i]['name']];

            if common.area_nearly_equal(variables[i], expected_value):
                print(" |  OK")
            else:
                print(f" | NOK | {int(ew - common.iwidth(expected_value)) * ' '}{expected_value :.3f}")
        except:
            pass

    print(f"---------------------------------------[{title}][END]")

# Load our model.

spec = importlib.util.spec_from_file_location("model", "${CMAKE_SOURCE_DIR}/src/@EXECUTABLE@/model.py")
model = importlib.util.module_from_spec(spec)

spec.loader.exec_module(model)

# Some information about the model.

print_information(model)

# Create our array of variables.

variables = model.create_variables_array()

# Initialise our variables, compute our computed constants, and output the initial value/guess of our variables.

model.initialise_variables(variables)
model.compute_computed_constants(variables)

print_values("Initial variable values/guesses", variables, @INITIAL_VARIABLE_VALUES_GUESSES@)

# Compute our variables.

model.compute_variables(variables)

# Output the final value of our variables.

print_values("Final variable values", variables, @FINAL_VARIABLE_VALUES@)
