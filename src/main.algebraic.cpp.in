#include "common.h"

extern "C" {
#include "model.h"
}

#include <iostream>

void printInformation()
{
    std::cout << "---------------------------------------[Information][BEGIN]" << std::endl;
    std::cout << "- Generator version: " << VERSION << std::endl;
    std::cout << "- libCellML version: " << LIBCELLML_VERSION << std::endl;
    std::cout << "---------------------------------------" << std::endl;
    std::cout << "- Number of constants: " << CONSTANT_COUNT << std::endl;
    std::cout << "- Constants:" << std::endl;

    for (size_t i = 0; i < CONSTANT_COUNT; ++i) {
        std::cout << "   - " << CONSTANT_INFO[i].component << "." << CONSTANT_INFO[i].name << " [" << CONSTANT_INFO[i].units << "]" << std::endl;
    }

    std::cout << "---------------------------------------" << std::endl;
    std::cout << "- Number of computed constants: " << COMPUTED_CONSTANT_COUNT << std::endl;
    std::cout << "- Computed constants:" << std::endl;

    for (size_t i = 0; i < COMPUTED_CONSTANT_COUNT; ++i) {
        std::cout << "   - " << COMPUTED_CONSTANT_INFO[i].component << "." << COMPUTED_CONSTANT_INFO[i].name << " [" << COMPUTED_CONSTANT_INFO[i].units << "]" << std::endl;
    }

    std::cout << "---------------------------------------" << std::endl;
    std::cout << "- Number of algebraic variables: " << ALGEBRAIC_COUNT << std::endl;
    std::cout << "- Algebraic variables:" << std::endl;

    for (size_t i = 0; i < ALGEBRAIC_COUNT; ++i) {
        std::cout << "   - " << ALGEBRAIC_INFO[i].component << "." << ALGEBRAIC_INFO[i].name << " [" << ALGEBRAIC_INFO[i].units << "]" << std::endl;
    }

    std::cout << "---------------------------------------[Information][END]" << std::endl;
}

void determineW(int &w, const double *values, size_t count)
{
    for (size_t i = 0; i < count; ++i) {
        auto cw = iwidth(values[i]);

        if (cw > w) {
            w = cw;
        }
    }
}

void printArray(const double *values, size_t count, const VariableInfo *info, const std::map<std::string, double> &expectedValues, int w, int ew)
{
    for (size_t i = 0; i < count; ++i) {
        std::printf("- %s: %s%.3f [%s]", info[i].name, std::string(w + isnan(values[i]) * 4 - iwidth(values[i]), ' ').c_str(), values[i], info[i].units);

        auto expectedValue = expectedValues.find(info[i].name);

        if (expectedValue != expectedValues.end()) {
            if (areNearlyEqual(values[i], expectedValue->second)) {
                std::cout << " |  OK";
            } else {
                std::printf(" | NOK | %s%.3f", std::string(ew - iwidth(expectedValue->second), ' ').c_str(), expectedValue->second);
            }
        }

        std::cout << std::endl;
    }
}

void printValues(const std::string &title, const double *constants, const double *computedConstants, const double *algebraic, const std::map<std::string, double> &expectedValues)
{
    int w = 0;

    determineW(w, constants, CONSTANT_COUNT);
    determineW(w, computedConstants, COMPUTED_CONSTANT_COUNT);
    determineW(w, algebraic, ALGEBRAIC_COUNT);

    int ew = 0;
    auto ev = expectedValues.begin();

    for (size_t i = 0; i < expectedValues.size(); ++i) {
        auto ecw = iwidth(ev->second);

        if (ecw > ew) {
            ew = ecw;
        }

        ++ev;
    }

    std::cout << std::endl << "---------------------------------------[" << title << "][BEGIN]" << std::endl;

    printArray(constants, CONSTANT_COUNT, CONSTANT_INFO, expectedValues, w, ew);
    printArray(computedConstants, COMPUTED_CONSTANT_COUNT, COMPUTED_CONSTANT_INFO, expectedValues, w, ew);
    printArray(algebraic, ALGEBRAIC_COUNT, ALGEBRAIC_INFO, expectedValues, w, ew);

    std::cout << "---------------------------------------[" << title << "][END]" << std::endl;
}

int main()
{
    // Some information about our model.

    printInformation();

    // Create our various arrays.

    double *constants = createConstantsArray();
    double *computedConstants = createComputedConstantsArray();
    double *algebraic = createAlgebraicArray();

    // Initialise our constants, computed constants, and algebraic variables and output their initial value/guess.

    initialiseVariables(constants, computedConstants, algebraic);
    computeComputedConstants(constants, computedConstants);

    printValues("Initial variable values/guesses", constants, computedConstants, algebraic, @INITIAL_VARIABLE_VALUES_GUESSES@);

    // Compute our variables.

    computeVariables(constants, computedConstants, algebraic);

    // Output the final value of our constants, computed constants, and algebraic variables.

    printValues("Final variable values", constants, computedConstants, algebraic, @FINAL_VARIABLE_VALUES@);

    // Clean up after ourselves.

    deleteArray(constants);
    deleteArray(computedConstants);
    deleteArray(algebraic);

    return 0;
}
